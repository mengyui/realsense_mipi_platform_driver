diff --git a/drivers/media/platform/tegra/camera/fusa-capture/capture-vi.c b/drivers/media/platform/tegra/camera/fusa-capture/capture-vi.c
index 416b33ad1..c747bc95c 100644
--- a/drivers/media/platform/tegra/camera/fusa-capture/capture-vi.c
+++ b/drivers/media/platform/tegra/camera/fusa-capture/capture-vi.c
@@ -536,9 +536,10 @@ void vi_capture_shutdown(
 			destroy_buffer_table(capture->buf_ctx);
 			capture->buf_ctx = NULL;
 		}
-
-		vfree(capture->unpins_list);
-		capture->unpins_list = NULL;
+		if (capture->unpins_list) {
+			vfree(capture->unpins_list);
+			capture->unpins_list = NULL;
+		}
 	}
 	kfree(capture);
 	chan->capture_data = NULL;
diff --git a/drivers/media/platform/tegra/camera/vi/vi5_fops.c b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
index 8ba911c4d..fe02cc0da 100644
--- a/drivers/media/platform/tegra/camera/vi/vi5_fops.c
+++ b/drivers/media/platform/tegra/camera/vi/vi5_fops.c
@@ -236,16 +236,14 @@ static int vi5_channel_open(struct tegra_channel *chan, u32 vi_port)
 	bool found = false;
 	char chanFilePath[VI_CHAN_PATH_MAX];
 	int channel = 0;
-	struct file *filp = NULL;
 	long err = 0;
 
 	while (!found) {
 		sprintf(chanFilePath, "%s%u", VI_CHANNEL_DEV, channel);
+		chan->fp[vi_port] = filp_open(chanFilePath, O_RDONLY, 0);
 
-		filp = filp_open(chanFilePath, O_RDONLY, 0);
-
-		if (IS_ERR(filp)) {
-			err = PTR_ERR(filp);
+		if (IS_ERR(chan->fp[vi_port])) {
+			err = PTR_ERR(chan->fp[vi_port]);
 			/* Retry with the next available channel. Opening
 			 * a channel number greater than the ones supported
 			 * by the platform will trigger a ENODEV from the
@@ -267,7 +265,7 @@ static int vi5_channel_open(struct tegra_channel *chan, u32 vi_port)
 	err = 0;
 	chan->vi_channel_id[vi_port] = channel;
 
-	chan->tegra_vi_channel[vi_port] = filp->private_data;
+	chan->tegra_vi_channel[vi_port] = chan->fp[vi_port]->private_data;
 
 	return err;
 }
@@ -519,92 +517,11 @@ uncorr_err:
 	spin_unlock_irqrestore(&chan->capture_state_lock, flags);
 }
 
-static int vi5_channel_error_recover_internal(struct tegra_channel *chan)
-{
-	int err = 0;
-	int vi_port = 0;
-	struct tegra_channel_buffer *buf;
-	struct v4l2_subdev *csi_subdev;
-	dev_dbg(chan->vi->dev, "%s() vc: %d\n", __func__, chan->virtual_channel);
-
-	/* stop vi channel */
-	for(vi_port = 0; vi_port < chan->valid_ports; vi_port++) {
-		err = vi_capture_release(chan->tegra_vi_channel[vi_port],
-			CAPTURE_CHANNEL_RESET_FLAG_IMMEDIATE);
-		if (err) {
-			dev_err(&chan->video->dev, "vi capture release failed\n");
-			goto done;
-		}
-		vi_channel_close_ex(chan->id, chan->tegra_vi_channel[vi_port]);
-		chan->tegra_vi_channel[vi_port] = NULL;
-	}
-
-	if (!list_empty(&chan->release)){
-			dev_warn(chan->vi->dev, "CHAN-RELEASE not EMPTY\n");
-	}
-	/* release all previously-enqueued capture buffers to temporary list */
-	while (!list_empty(&chan->capture)) {
-		buf = dequeue_buffer(chan, false);
-		if (!buf)
-			break;
-		spin_lock(&chan->release_lock);
-		list_add_tail(&buf->queue, &chan->release);
-		spin_unlock(&chan->release_lock);
-	}
-	while (!list_empty(&chan->dequeue)) {
-		buf = dequeue_dequeue_buffer(chan);
-		if (!buf)
-			break;
-		spin_lock(&chan->release_lock);
-		list_add_tail(&buf->queue, &chan->release);
-		spin_unlock(&chan->release_lock);
-	}
-
-	/* reset nvcsi stream */
-	csi_subdev = tegra_channel_find_linked_csi_subdev(chan);
-	if (!csi_subdev) {
-		dev_err(chan->vi->dev, "unable to find linked csi subdev\n");
-		err = -1;
-		goto done;
-	}
-
-	v4l2_subdev_call(csi_subdev, core, sync,
-		V4L2_SYNC_EVENT_SUBDEV_ERROR_RECOVER);
-
-	/* restart vi channel */
-	for(vi_port = 0; vi_port < chan->valid_ports; vi_port++) {
-		chan->tegra_vi_channel[vi_port] = vi_channel_open_ex(chan->id + vi_port, false);
-		if (IS_ERR(chan->tegra_vi_channel[vi_port])) {
-			err = PTR_ERR(chan);
-			goto done;
-		}
-		err = tegra_channel_capture_setup(chan, vi_port);
-		if (err < 0)
-			goto done;
-	}
-
-	chan->sequence = 0;
-	tegra_channel_init_ring_buffer(chan);
-	chan->capture_reqs_enqueued = 0;
-
-	chan->capture_state = CAPTURE_IDLE;
-
-	while (!list_empty(&chan->release)) {
-		buf = list_entry(chan->release.next, struct tegra_channel_buffer,
-			queue);
-		list_del_init(&buf->queue);
-		buf->vb2_state = VB2_BUF_STATE_ACTIVE;
-		vi5_capture_enqueue(chan, buf);
-	}
-
-done:
-	return err;
-}
-
 static void vi5_capture_dequeue(struct tegra_channel *chan,
 	struct tegra_channel_buffer *buf)
 {
 	int err = 0;
+	bool frame_err = false;
 	int vi_port = 0;
 	int gang_prev_frame_id = 0;
 	unsigned long flags;
@@ -648,28 +565,7 @@ static void vi5_capture_dequeue(struct tegra_channel *chan,
 					"err_data %d, vc: %d\n",
 					descr->status.frame_id, descr->status.flags,
 					descr->status.err_data, chan->virtual_channel);
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
-					buf->vb2_state = VB2_BUF_STATE_REQUEUEING;
-#else
-					buf->vb2_state = VB2_BUF_STATE_ERROR;
-#endif
-				/* D457: err_data 131072 (20000h) & 512 (200h) leading to channel
-				* timeout. This happens when first frame is corrupted - no md
-				* and less lines than requested.
-				* Error 262144 (40000h) cause high cpu usage.
-				* Channel reset time is 6ms */
-				if (descr->status.err_data & 0x60200) {
-					spin_lock_irqsave(&chan->capture_state_lock, flags);
-					chan->capture_state = CAPTURE_ERROR;
-					spin_unlock_irqrestore(&chan->capture_state_lock, flags);
-					buf->vb2_state = VB2_BUF_STATE_ERROR;
-					vi5_channel_error_recover_internal(chan);
-				}
-				/* REQUEUE */
-				buf->vb2_state = VB2_BUF_STATE_ACTIVE;
-				vi5_capture_enqueue(chan, buf);
-
-				return;
+				frame_err = true;
 			}
 		} else if (!vi_port) {
 			gang_prev_frame_id = descr->status.frame_id;
@@ -701,7 +597,14 @@ static void vi5_capture_dequeue(struct tegra_channel *chan,
 #endif
 	vb->vb2_buf.timestamp = descr->status.sof_timestamp;
 
-	buf->vb2_state = VB2_BUF_STATE_DONE;
+	if (frame_err)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
+		buf->vb2_state = VB2_BUF_STATE_REQUEUEING;
+#else
+		buf->vb2_state = VB2_BUF_STATE_ERROR;
+#endif
+	else
+		buf->vb2_state = VB2_BUF_STATE_DONE;
 	/* Read EOF from capture descriptor */
 #if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
 	ts = ns_to_timespec((s64)descr->status.eof_timestamp);
@@ -738,15 +641,9 @@ static int vi5_channel_error_recover(struct tegra_channel *chan,
 
 	/* stop vi channel */
 	for (vi_port = 0; vi_port < chan->valid_ports; vi_port++) {
-		err = vi_capture_release(chan->tegra_vi_channel[vi_port],
-			CAPTURE_CHANNEL_RESET_FLAG_IMMEDIATE);
-		if (err) {
-			dev_err(&chan->video->dev, "vi capture release failed\n");
-			goto done;
-		}
-		vi_channel_close_ex(chan->vi_channel_id[vi_port],
-					chan->tegra_vi_channel[vi_port]);
+		filp_close(chan->fp[vi_port], NULL);
 		chan->tegra_vi_channel[vi_port] = NULL;
+		kfree(chan->tegra_vi_channel[vi_port]);
 	}
 
 
@@ -1058,7 +955,7 @@ static int vi5_channel_start_streaming(struct vb2_queue *vq, u32 count)
 
 		ret = vi5_channel_start_kthreads(chan);
 		if (ret != 0)
-			goto err_start_kthreads;
+			goto err_setup;
 	}
 
 	/* csi stream/sensor devices should be streamon post vi channel setup */
@@ -1079,17 +976,10 @@ err_set_stream:
 	if (!chan->bypass)
 		vi5_channel_stop_kthreads(chan);
 
-err_start_kthreads:
-	if (!chan->bypass)
-		for (vi_port = 0; vi_port < chan->valid_ports; vi_port++)
-			vi_capture_release(chan->tegra_vi_channel[vi_port],
-				CAPTURE_CHANNEL_RESET_FLAG_IMMEDIATE);
-
 err_setup:
 	if (!chan->bypass)
 		for (vi_port = 0; vi_port < chan->valid_ports; vi_port++) {
-			vi_channel_close_ex(chan->vi_channel_id[vi_port],
-						chan->tegra_vi_channel[vi_port]);
+			filp_close(chan->fp[vi_port], NULL);
 			chan->tegra_vi_channel[vi_port] = NULL;
 		}
 
@@ -1103,7 +993,6 @@ err_open_ex:
 static int vi5_channel_stop_streaming(struct vb2_queue *vq)
 {
 	struct tegra_channel *chan = vb2_get_drv_priv(vq);
-	long err;
 	int vi_port = 0;
 	if (!chan->bypass)
 		vi5_channel_stop_kthreads(chan);
@@ -1113,16 +1002,9 @@ static int vi5_channel_stop_streaming(struct vb2_queue *vq)
 
 	if (!chan->bypass) {
 		for (vi_port = 0; vi_port < chan->valid_ports; vi_port++) {
-			err = vi_capture_release(chan->tegra_vi_channel[vi_port],
-				CAPTURE_CHANNEL_RESET_FLAG_IMMEDIATE);
-
-			if (err)
-				dev_err(&chan->video->dev,
-					"vi capture release failed\n");
-
-			vi_channel_close_ex(chan->vi_channel_id[vi_port],
-						chan->tegra_vi_channel[vi_port]);
+			filp_close(chan->fp[vi_port], NULL);
 			chan->tegra_vi_channel[vi_port] = NULL;
+			kfree(chan->tegra_vi_channel[vi_port]);
 		}
 
 		/* release all remaining buffers to v4l2 */
diff --git a/include/media/mc_common.h b/include/media/mc_common.h
index d0e908bf1..87938aa46 100644
--- a/include/media/mc_common.h
+++ b/include/media/mc_common.h
@@ -171,6 +171,7 @@ struct tegra_channel {
 	unsigned int num_video_formats;
 	struct mutex stop_kthread_lock;
 
+	struct file *fp[TEGRA_CSI_BLOCKS];
 	unsigned int vi_channel_id[TEGRA_CSI_BLOCKS];
 	unsigned char port[TEGRA_CSI_BLOCKS];
 	unsigned int virtual_channel;
